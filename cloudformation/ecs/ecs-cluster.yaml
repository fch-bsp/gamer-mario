AWSTemplateFormatVersion: '2010-09-09'
Description: 'Mario Game - ECS Cluster, Task Definition e Service'

Parameters:
  ProjectName:
    Type: String
    Default: mario-game
    Description: Nome do projeto para tags e recursos
  
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Ambiente de deploy

  ECRImageURI:
    Type: String
    Default: 440744259713.dkr.ecr.us-east-1.amazonaws.com/mario-game:latest
    Description: URI da imagem no ECR

  DesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Número desejado de tasks

  TaskCpu:
    Type: String
    Default: 512
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Description: CPU para a task (512 = 0.5 vCPU - Recomendado para jogos HTML5)

  TaskMemory:
    Type: String
    Default: 1024
    AllowedValues: [512, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192]
    Description: Memória para a task em MB (1024MB = 1GB - Recomendado para jogos HTML5)

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-${Environment}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cluster'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}-${Environment}'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-logs'
        - Key: Project
          Value: !Ref ProjectName

  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-task-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
        - PolicyName: XRayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-execution-role'
        - Key: Project
          Value: !Ref ProjectName

  # ECS Task Role (para a aplicação)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: XRayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-role'
        - Key: Project
          Value: !Ref ProjectName

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-container'
          Image: !Ref ECRImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '8080'
            - Name: _X_AMZN_TRACE_ID
              Value: !Sub '${AWS::StackName}-${AWS::Region}'
            - Name: AWS_XRAY_TRACING_NAME
              Value: !Sub '${ProjectName}-${Environment}'
            - Name: AWS_XRAY_CONTEXT_MISSING
              Value: LOG_ERROR
          ReadonlyRootFilesystem: false
          User: '1001:1001'
          DependsOn:
            - ContainerName: xray-daemon
              Condition: START
        - Name: xray-daemon
          Image: public.ecr.aws/xray/aws-xray-daemon:latest
          Essential: false
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: _X_AMZN_TRACE_ID
              Value: !Sub '${AWS::StackName}-xray'
          Command:
            - -o
            - -n
            - !Ref AWS::Region
            - -b
            - 0.0.0.0:2000
          Cpu: 32
          MemoryReservation: 256
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-definition'
        - Key: Project
          Value: !Ref ProjectName

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ProjectName}-${Environment}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ecs-sg-id'
          Subnets:
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-private-subnet-1-id'
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-private-subnet-2-id'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub '${ProjectName}-container'
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: !Sub '${ProjectName}-${Environment}-target-group-arn'
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-service'
        - Key: Project
          Value: !Ref ProjectName

  # Auto Scaling Target
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - CPU
  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ProjectName}-${Environment}-cpu-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Auto Scaling Policy - Memory
  ServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ProjectName}-${Environment}-memory-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cluster-name'

  ECSClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cluster-arn'

  ECSServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${ProjectName}-${Environment}-service-name'

  ECSServiceArn:
    Description: ECS Service ARN
    Value: !Ref ECSService
    Export:
      Name: !Sub '${ProjectName}-${Environment}-service-arn'

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${ProjectName}-${Environment}-task-definition-arn'

  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-log-group-name'
